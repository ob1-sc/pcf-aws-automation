---
resource_types:

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:

- name: aws-terraform
  type: git
  source:
    uri: ((terraform_repo))
    branch: master

- name: pcf-aws-automation
  type: git
  source:
    uri: ((automation_repo))
    branch: master

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((access_key_id))
    secret_access_key: ((secret_access_key))
    region_name: ((aws_region))
    bucket: ((artifacts_bucket))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((access_key_id))
    secret_access_key: ((secret_access_key))
    region_name: ((aws_region))
    bucket: ((artifacts_bucket))
    regexp: platform-automation-image-(.*).tgz

- name: terraform-state
  type: s3
  source:
    access_key_id: ((access_key_id))
    secret_access_key: ((secret_access_key))
    region_name: ((aws_region))
    bucket: ((tf_state_bucket))
    versioned_file: terraform.tfstate

- name: pivnet-opsmgr
  type: pivnet
  source:
    api_token: ((pivnet-token))
    product_slug: ops-manager
    product_version: ((opsman_major_minor_version))
    sort_by: semver

jobs:

- name: pave-iaas
  plan:
  - aggregate:
    - get: pcf-aws-automation
    - get: terraform-state
    - get: aws-terraform
    - get: platform-automation-image
      params:
        unpack: true
    - get: pivnet-opsmgr
      params:
        globs:
        - '*AWS.yml'

  - task: find-ami
    image: platform-automation-image
    config:
      inputs:
      - name: pivnet-opsmgr
      outputs:
      - name: ami
      params:
        AWS_REGION: null
      platform: linux
      run:
        args:
        - -c
        - |
          ami=$(grep $AWS_REGION pivnet-opsmgr/*.yml | cut -d' ' -f2)
          echo $ami > ami/ami
          echo $ami
        path: bash
    params:
      AWS_REGION: ((aws_region))

  - task: create-infrastructure
    image: platform-automation-image
    file: pcf-aws-automation/tasks/prepare-aws/task.yml
    params:
      ENV_NAME: ((env_name))
      AWS_ACCESS_KEY_ID: ((access_key_id))
      AWS_SECRET_ACCESS_KEY: ((secret_access_key))
      AWS_REGION: ((aws_region))
      AWS_AZ1: ((aws_az1))
      AWS_AZ2: ((aws_az2))
      AWS_AZ3: ((aws_az3))
      HOSTED_ZONE: ((hosted_zone))
      DNS_SUFFIX: ((dns_suffix))
      VPC_CIDR: ((vpc_cidr))
    ensure:
      params:
        file: terraform-state-output/terraform.tfstate
      put: terraform-state

- name: destroy-iaas
  plan:

  - aggregate:
    - get: pcf-aws-automation
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: aws-terraform
    - get: terraform-state
    - get: pivnet-opsmgr
      params:
        globs:
        - '*AWS.yml'

  - task: destroy-infrastructure
    ensure:
      params:
        file: terraform-state-output/terraform.tfstate
      put: terraform-state
    file: pcf-aws-automation/tasks/destroy-aws/task.yml
    params:
      ENV_NAME: ((env_name))
      AWS_ACCESS_KEY_ID: ((access_key_id))
      AWS_SECRET_ACCESS_KEY: ((secret_access_key))
      AWS_REGION: ((aws_region))
      AWS_AZ1: ((aws_az1))
      AWS_AZ2: ((aws_az2))
      AWS_AZ3: ((aws_az3))
      HOSTED_ZONE: ((hosted_zone))
      DNS_SUFFIX: ((dns_suffix))
      VPC_CIDR: ((vpc_cidr))